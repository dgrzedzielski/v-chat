@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin vh($focusable: false) {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    @if $focusable {
        @include vh-focusable;
    }
}

@mixin vh-reset {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}

// Allow the element to be focusable when navigated to via the keyboard
@mixin vh-focusable {
    &:active,
    &:focus {
        clip: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        position: static;
        width: auto;
    }
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: ttf) {
    $src: null;

    $formats: (
            otf: "opentype",
            ttf: "truetype"
    );

    @each $ext in $exts {
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $ext)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
        font-display: swap;
    }
}

@mixin absolute($top: null, $left: null, $right: null, $bottom: null) {
    position: absolute;

    @if $top {
        top: $top;
    }
    @if $left {
        left: $left;
    }
    @if $right {
        right: $right;
    }
    @if $bottom{
        bottom: $bottom;
    }
}

@mixin absolute-full() {
    @include absolute(0, 0, 0, 0);
}

@mixin square($length) {
    width: $length;
    height: $length;
}

@mixin flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}
